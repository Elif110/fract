// Copyright (c) 2021 Fract Developer Team
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
// Authors;
// + Mertcan Davulcu | @mertcandav
//

package reflect

const (
    None      = 0
    Int       = 1
    Float     = 2
    String    = 3
    Bool      = 4
    Func      = 5
    List      = 6
    Map       = 7
    Package   = 8
    StructDef = 9  // Struct define.
    StructIns = 10 // Struct instance.
    ClassDef  = 11 // Class define.
    ClassIns  = 12 // Class instance.
)

// NameOfType is returns string name of specified object.
func NameOfType(obj) {
    code := type(obj)
    if code == None {
        return "None"
    } else if code == Int {
        return "Int"
    } else if code == Float {
        return "Float"
    } else if code == String {
        return "String"
    } else if code == Bool {
        return "Bool"
    } else if code == Func {
        return "Func"
    } else if code == List {
        return "List"
    } else if code == Package {
        return "Package"
    } else if code == StructDef {
        return "StructDef"
    } else if code == StructIns {
        return "StructIns"
    } else if code == ClassDef {
        return "ClassDef"
    } else if code == ClassIns {
        return "ClassIns"
    }
}

// TypeInfo is type information of object.
class TypeInfo {
    var (
        name  = ''   // Type name.
        code  = 0    // Type code.
        value = none // Value of object.
    )

    // Create instance for type information of specified object.
    func TypeInfo(obj) {
        this.value = obj
        this.code = type(obj)
        this.name = NameOfType(this.code)
    }

    // Name is returns string name of type.
    func Name() {
        return this.name
    }

    // Code is returns code of type.
    func Code() {
        return this.code
    }

    // IsEnumerable returns true if object is enumerable object,
    // returns false if not.
    func IsEnumerable() {
        return this.code == String || this.code == List || this.code == Map
    }

    // IsNumeric is returns object is numeric type.
    func IsNumeric() {
        return this.code == Int || this.code == Float
    }

    // IsInstance is returns object is instance of any class or struct.
    func IsInstance() {
        return this.code == ClassIns || this.code == StructIns
    }

    // Value is returns value of object.
    func Value() {
        return this.value
    }
}
