// Copyright 2021, MIT License.
//
// Authors
// ----------------
// Mertcan Davulcu
//
//
// Description
// ----------------
// Array utilities.
//

package array

// Returns true if element is contained in array, returns false if not.
func Contains(array, element, start=0) {
  if start < 0 || start >= len(array) {
    ret false
  }
  for _, index in range(start, len(array) - start - 1) {
    if array[index] == element {
      ret true
    }
  }
  ret false
}

// Returns index if element is found in array, returns -1 if not.
func Index(array, element, start=0) {
  if start < 0 || start >= len(array) {
    ret -1
  }
  for _, index in range(start, len(array) - start - 1) {
    if array[index] == element {
      ret index
    }
  }
  ret -1
}

// Returns maximum of array.
func Max(array) {
  if len(array) == 0 {
    ret 0
  }
  max := array[0]
  for _, element in array {
    if max < element {
      max = element
    }
  }
  ret max
}

// Returns mean of array.
func Mean(array) {
  total := 0
  for _, element in array {
    total += element
  }
  ret total / len(array)
}

// Returns minimum of array.
func Min(array) {
  if len(array) == 0 {
    ret 0
  }
  min := array[0]
  for _, element in array {
    if min > element {
      min = element
    }
  }
  ret min
}

// Returns reversed array.
func Reverse(array) {
  const arlen = len(array)
  for index in range(0, arlen / 2) {
    const cache = array[index]
    array[index] = array[arlen - index - 1]
    array[arlen - index - 1] = cache
  }
  ret array
}

// Returns sorted array.
func Sort(array) {
  // BUBBLE SORT
  const length  = len(array) - 2
  for _, i in range(0, length) {
    updated := false
    for _, j in range(0, length - i) {
      if array[j] > array[j + 1] {
        updated = true
        const cache = array[j]
        array[j] = array[j + 1]
        array[j + 1] = cache
      }
    }
    if updated == false {
      break
    }
  }
  ret array
}

// Returns subbed array.
func Sub(array, start, length) {
  if start < 0 || length < 0 {
    ret []
  }
  const arrlen = len(array)
  if start > arrlen {
    ret []
  } else if start + length > arrlen {
    length = arrlen - start
  }
  newArray := []
  for _, index in range(start, length + start - 1) {
    newArray = append(newArray, array[index])
  }
  ret newArray
}

// Returns sum of all array elements.
func Sum(array) {
  total := 0
  for _, element in array {
    total += element
  }
  ret total
}
