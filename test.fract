#>

var a = 4
var b = 4.0
var c = false
c = true
b + a + c

<#

#>

var test = [4]
test[3] = 1
test
test[3] = [4]

<#

#>

if ((b + b <> 8) && false) || (b + b == 8 && 2 == 2)
	3
	if true == false
		5
	elif false == false
		10
		4
	end
end

<#

#>

var test = [ 0, 1, 0, 0, 0 ]
test[4] = 5
test1[0] = 2
test
test1
test + test1

<#

#>

if true == false
	5
elif false == false
	10
	4
end

<#

#>

var t1 = [ 0, 3, 2, 1, 90 ]
var t2 = [ ]
t1 == t2

<#

#>

for index in [ 0, 1, 2, 3, 4.0 ]
	var test = index
	index
end

<#

# PRIME NUMBER BETWEEN 1 an 100
#>
var num = 1
for num <= 100
	num = num + 1
	var prime = true
	var i = 2
	for i < num
		i = i + 1
		if num % i == 0
			prime = false
			break
		end
	end
	if prime
		num
	end
end

<#

#>

var counter = 1
for counter <= 500
	var total = 0
	var ccounter = 1
	for ccounter < counter
		if counter % ccounter == 0
			total = total + ccounter
		end
		ccounter = ccounter + 1
	end
	if total == counter
		counter
	end
	counter = counter + 1
end

<#

# ARRAY SUM TEST
#>
var array = [ 0, 4, 4, 2 ]   # Elements: 0 4 4 2
array = array + 5            # Elements: 5 9 9 7
array
del array
var array = [ 0, 4, 4, 2 ]   # Elements: 0 4 4 2
var array2 = [ 2, 2, 2, 2 ]  # Elements: 2 2 2 2
array = array + array2       # Elements: 2 6 6 4
array
del array, array2
<#

# FUNCTION TEST
#>
func calc.length(list)
	var counter = 0
	for _ in list
		counter = counter + 1
	end
	ret counter
end
<#

#>
func calc.range(start, to, step=1)
	var lst = [0]
	var index = 0
	for start < to
		lst = [ lst, start ]
		start = start + step
		index = index + 1
	end
	ret lst
end
<#

#>
open t std.array

var arr = [1, 2, 3, 90, 4, 2, 3]

var array = t.Clone(arr)
array[0] = 0

print(array)
print(arr)

exit()
<#

#>
func test(a, b, c=4)
 print(a)
 del a
 print(b)
 print(c)
end

test(1, 20)

open std.math

print(math.Sqrt(5))
input()
<#

#>

open std.math

print(math.Min(-7, 5))

exit()

<#

#>

open std.array

print(array.Sort([90,3,5,6,3,1]))

exit()

<#

#>

open t std.array

var arr = range(1, 11)

print(arr)

print(t.Reverse(arr))

exit()

<#

#>

open std.math

for _, number in range(0, 10)
	print(number, fin=" ")
	print(math.Prime(number))
end

<#

#>

open std.strings

print(strings.IsLetter("X"))

<#

#>

open std.strings

print(strings.IsUpper("XAAA*"))

<#

#>

open std.strings

print(strings.IsLower("xaaa*"))

<#

#>

open std.strings

print(strings.Upper("mertCa-n"))

<#

#>

open std.strings

print(strings.Lower("MertCa-N"))

<#

#>

open std.strings

print(strings.Capitalize("fract language"))

<#

#>

open std.strings

print(strings.SwapCase("Fract language"))

<#

#>

open std.strings

const bytes = strings.GetBytes("Fract language")

print(bytes)
print(string(bytes, type="bytecode"))

<#

#>

open std.strings

print(strings.IsIdentifier("_Fr4a_ct"))

<#

#>

open std.strings

print(strings.IsSpace("      \v\t\n"))

<#

#>

print(132e-3)
print(132E-3)

<#

#>

print(NaN + 2)
print( 3535+4 )

<#

#>

open std.math

print(math.IsNaN(NaN))
print(math.IsNaN(5))

<#

#>

open std.math

print(math.E)
print(math.Pi)
print(math.Phi)
print(math.Sqrt2)
print(math.SqrtE)
print(math.SqrtPi)
print(math.SqrtPhi)
print(math.Ln2)
print(math.Log2E)
print(math.Ln10)
print(math.Log10E)
print(3.40282346638528859811704183484516925440e+38)
print(1.401298464324817070923729583289916131280e-45)
print(0xFFFFEAF)
print(math.INT8_MAX)
print(math.FLOAT32_MAX)
print(math.FLOAT64_MAX)

<#

#>

open std.strings

var bytes = int("Hello ðŸ˜‹", type="strcode")
print(bytes)
print(string(bytes, type="bytecode"))

<#

#>

open std.runtime

print(runtime.OS)
print(runtime.ARCH)

<#

#>

#pragma enofi
#define PRINT_AS_FLOAT true
#define PRINT_AS_OBJECTSTR

const value = 4.535

#if PRINT_AS_FLOAT
	#if PRINT_AS_OBJECTSTR
		print(string(value, type="object"))
	#else
		print(value)
	#end
#else
	#if PRINT_AS_OBJECTSTR
		print(string(int(value), type="object"))
	#else
		print(int(value))
	#end
#end

<#

#>

print("counting")

for i in range(0, 9)
	defer print(i)
end

print("done")

<#

#>

func test(a)
	a[0] = 90
end

mut a = [3,2,5,6,4]
var b = a
b[0] = 90
print(a)
# test(a)
print(a)

<#

#>

if [1, 3, 4] in [4, 2, 7]
	print("Yes!")
else
	print("No!")
end

<#

#>

print(2.E+3)
print(2. + 4)

<#

#>

const binary = [0, 1]
var decimal = append(binary, 2, 3, 4, 5, 6, 7, 8, 9)
print(decimal)

<#

#>

var a = [1, 2, 3, 4, 5, [90, 91, 92, 93, 94, [95, 4, 3, 1]]]
print(a)
print(([1, 2, 3, 4] + [1, 1, 1, [2, [1]]]))

func Print(...args)
	print(args)
end

Print(1, 2, 3, 4, [1, 2, 3, [4]])

<#

#>

var a = [1, 90, 2, 4, 80]
a[1.2] -= 20
print(a)

<#

#>

var a = calloc(4)
for i in a
	a[i] = i + 1
end
a = realloc(a, len(a))
print(a)

<#



#>

var e9 = [89, 189, 289, 389, 489, 589]
e9[0] = [90, 19, 20]
print(e9)
e9[[0, 2, 3, -1]] -= 89
print(e9)
print(e9[[-1, -2, -3]])
e9 = 'Fract Programming Language!'
print(e9[[0, 1, 2, 3, 4, 5, -9, -8, -7, -6, -5, -4, -3, -2, -1]])

# OUTPUT
# [[90 19 20] 189 289 389 489 589]
# [[1 -70 -69] 189 200 300 489 500]
# [500 489 300]
# Fract Language!

<#

print([x*100 for x in range(1, 100)])
print([x*100 for x in range(1, 100), x <= 50])
