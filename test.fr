package test

/*
try {} ; ; fn a() {
  println('TEST'); if false { ret 0 } else { ret 1 }
}

println(a())
*/

/*
// Short variable declaration.
a := [1, 100, 1000, 10000]
println(a)
*/

/*
// Anonymous functions.
b := fn(x) { println('Hello ', x, '!') }
b('Fract')
*/

/*
// Maps.
b := {'name': 'Mertcan', 'surname': 'Davulcu'}
println('name' in b)
b['name'] = 'Mert'
println(b)
b['age'] = 20
println(b)
b[['ag', 'age']] -= 5
println(b)
for key in b {
  print(b[key], ' ')
}
println()
del(mut(b), 'ag')
println(b)
*/

/*
// Immutability.
var a = [1, 20, 30, 4]
var b = [a, 90, 100]
c := mut b[0]
// b[0] = 10000
c[0] = 900
println(a)
println(b)
println(c)
*/

/*
// Varset.
a := [1, 20, 30, 4]
b := [a, 90, 100]
b[0][[1, 2]] += 1000
println(a)
println(b)
*/

/*
// Imports & packages.
open math
println(math.Pi)
println(math.Abs(9))
*/

/*
// Structs.
struct person {
  name
  surname
}

p := person('Daniel', 'McVollo')
println(p)
println(struct{name; surname}('Daniel', 'McVollo'))
println(p.name)
p.name = 'Dan'
println(p.name)
*/

/*
// Classes.
class employee {
  var name = ''
  var surname = ''
  var salary = ''

  fn employee(name, surname, salary) {
      this.name = name
      this.surname = surname
      this.salary = salary
  }

  fn getName       { ret this.name }
  fn setName(name) { this.name = name }
  fn string        { ret this.name + ' ' + this.surname + ' ' + string(this.salary) }
}

e := employee('Daniel', 'McVollo', '9000')
println(e.string())
println(e.getName())
e.setName('Dan')
println(e.getName())
println(e.string())
*/

/*
// Notation ... test.
fn Print(...x) {
  l := len(x)-1
  for i, y := x {
    print(y)
    if i < l {
      print(' ')
    }
  }
}

fn Println(...x) {
  Print(x...)
  println()
}

Println('Mertcan', 'Davulcu')
*/

/*
// Panic test.
try {
  panic('test panic')
} catch p {
  println('panicked: ', p)
  println('catch')
}

println('Finish')
*/

/*
// Type function test.
t := type(struct{})
println(t)
*/

/*
// OOP Map.
m := {'key1': 1, 'key2': 2, 'key3': 3}
println(m)
println(m.keys())
println(m.values())
println(m.removeKey('key'))
println(m)
println(m.removeKey('key1'))
println(m)
*/

/*
// None test.
println(none)
println([print(x*100, ' ') for x in range(1, 100)])
*/

// OOP Array(List).
l := range(0, 10)
println(l)
l.pushBack(11, 0)
println(l)
l.pushFront(-1)
println(l)
println(l.index(0), ' ', l.index(0, 2), ' ', l.index(-1000))
println(l.indexLast(0), ' ', l.indexLast(0, 2), ' ', l.indexLast(-1000))
l.insert(len(l), -2)
println(l)
println(l.sub(2, 5))
l.reverse()
println(l)
l.sort()
println(l)
println(l.unique())
println(l.include(0), ' ', l.include(-100))
l.removeAt(len(l)-1)
println(l)
l.pushBack(9)
println(l)
println(l.removeLast(90), ' ', l.removeLast(9), ' ', l)
println(l.remove(90), ' ', l.remove(9), ' ', l)
l.pushBack(0, 0, 0, 0,)
l.removeAll(0)
println(l)
l.removeRange(2, len(l)-2)
println(l)
